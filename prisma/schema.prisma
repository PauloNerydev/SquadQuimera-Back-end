// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  image       String?
  verified    Boolean  @default(false)
  userId      Int      @map("user_id")
  brandId     Int      @map("brand_id")
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  feedbacks Feedback[]
  brand     Brand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  IngredientsOnProducts IngredientsOnProducts[]
  CategoriesOnProducts  CategoriesOnProducts[]

  @@map("products")
}

enum Permission {
  USER
  BRAND
  ADMIN
}

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique @default("")
  password_hash String     @default("")
  permission    Permission @default(USER)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  feedback      Feedback[]
  products      Product[]

  @@map("user")
}

model Feedback {
  id         Int      @id @default(autoincrement())
  contents   String
  userId     Int      @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId  Int      @map("product_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("feedbacks")
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String
  product Product[]

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("brand")
}

model Ingredient {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  IngredientsOnProducts IngredientsOnProducts[]
  @@map("ingredients")
}

model IngredientsOnProducts {
  id           Int        @id @default(autoincrement())
  ingredientId Int        @map("ingredient_id")
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  productId    Int        @map("product_id")
  product      Product    @relation(fields: [productId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  CategoriesOnProducts CategoriesOnProducts[]
  @@map("categories")
}

model CategoriesOnProducts {
  id         Int      @id @default(autoincrement())
  categoryId Int      @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  productId  Int      @map("product_id")
  product    Product  @relation(fields: [productId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}
